import unittest
from banking_system_impl import BankingSystemImpl


class Level4Tests(unittest.TestCase):
    """
    The test suit below includes 10 tests for Level 4.

    All have the same score.
    You are not allowed to modify this file,
    but feel free to read the source code
    to better understand what is happening in every specific case.
    """

    failureException = Exception


    @classmethod
    def setUp(cls):
        cls.system = BankingSystemImpl()

    def test_level_4_case_01_deletes_account_2_and_combines_balances(self):
        self.assertTrue(self.system.create_account(1, 'account1'))
        self.assertTrue(self.system.create_account(2, 'account2'))
        self.assertEqual(self.system.deposit(3, 'account1', 1000), 1000)
        self.assertEqual(self.system.deposit(4, 'account2', 1000), 1000)
        self.assertTrue(self.system.merge_accounts(5, 'account1', 'account2'))
        self.assertEqual(self.system.deposit(6, 'account1', 250), 2250)
        self.assertIsNone(self.system.deposit(7, 'account2', 1000))

    def test_level_4_case_02_shows_correct_spender_stats(self):
        self.assertTrue(self.system.create_account(1, 'account1'))
        self.assertTrue(self.system.create_account(2, 'account2'))
        self.assertTrue(self.system.create_account(3, 'account3'))
        self.assertTrue(self.system.create_account(4, 'account4'))
        self.assertEqual(self.system.deposit(5, 'account1', 1000), 1000)
        self.assertEqual(self.system.deposit(6, 'account2', 1000), 1000)
        self.assertEqual(self.system.deposit(7, 'account3', 1000), 1000)
        self.assertEqual(self.system.deposit(8, 'account4', 1000), 1000)
        self.assertEqual(self.system.transfer(9, 'account1', 'account2', 500), 500)
        self.assertEqual(self.system.transfer(10, 'account1', 'account4', 100), 400)
        self.assertIsNone(self.system.transfer(11, 'account2', 'account2', 300))
        self.assertEqual(self.system.transfer(12, 'account3', 'account2', 200), 800)
        self.assertEqual(self.system.pay(13, 'account3', 200), 'payment1')
        self.assertEqual(self.system.pay(14, 'account4', 500), 'payment2')
        expected = ['account1(600)', 'account4(500)', 'account3(400)', 'account2(0)']
        self.assertEqual(self.system.top_spenders(15, 4), expected)
        self.assertTrue(self.system.merge_accounts(16, 'account2', 'account3'))
        expected = ['account1(600)', 'account4(500)', 'account2(400)']
        self.assertEqual(self.system.top_spenders(17, 4), expected)

    def test_level_4_case_03_cashback_deposits_are_processed(self):
        self.assertTrue(self.system.create_account(1, 'account1'))
        self.assertTrue(self.system.create_account(2, 'account2'))
        self.assertEqual(self.system.deposit(3, 'account1', 1000), 1000)
        self.assertEqual(self.system.deposit(4, 'account2', 1000), 1000)
        self.assertEqual(self.system.pay(5, 'account1', 200), 'payment1')
        self.assertEqual(self.system.pay(6, 'account2', 500), 'payment2')
        self.assertTrue(self.system.merge_accounts(7, 'account1', 'account2'))
        self.assertEqual(self.system.get_payment_status(8, 'account1', 'payment1'), 'IN_PROGRESS')
        self.assertEqual(self.system.get_payment_status(9, 'account1', 'payment2'), 'IN_PROGRESS')
        self.assertIsNone(self.system.get_payment_status(10, 'account2', 'payment2'))
        self.assertEqual(self.system.get_payment_status(86400005, 'account1', 'payment1'), 'CASHBACK_RECEIVED')
        self.assertEqual(self.system.get_payment_status(86400006, 'account1', 'payment2'), 'CASHBACK_RECEIVED')
        self.assertIsNone(self.system.get_payment_status(86400007, 'account2', 'payment2'))
        self.assertEqual(self.system.deposit(86400008, 'account1', 100), 1414)

    def test_level_4_case_04_basic_get_balance(self):
        self.assertTrue(self.system.create_account(1, 'account1'))
        self.assertTrue(self.system.create_account(2, 'account2'))
        self.assertTrue(self.system.create_account(3, 'account3'))
        self.assertEqual(self.system.deposit(4, 'account1', 1000), 1000)
        self.assertEqual(self.system.deposit(5, 'account2', 2000), 2000)
        self.assertEqual(self.system.deposit(6, 'account3', 3000), 3000)
        self.assertEqual(self.system.transfer(7, 'account1', 'account2', 100), 900)
        self.assertEqual(self.system.pay(8, 'account2', 200), 'payment1')
        self.assertEqual(self.system.transfer(9, 'account3', 'account2', 300), 2700)
        self.assertEqual(self.system.pay(10, 'account1', 400), 'payment2')
        self.assertTrue(self.system.merge_accounts(13, 'account1', 'account2'))
        self.assertEqual(self.system.get_balance(14, 'account1', 7), 900)
        self.assertEqual(self.system.get_balance(15, 'account1', 9), 900)
        self.assertEqual(self.system.get_balance(16, 'account1', 13), 2700)
        self.assertEqual(self.system.get_balance(17, 'account3', 15), 2700)

    def test_level_4_case_05_get_balance_with_payment_cashback(self):
        self.assertTrue(self.system.create_account(1, 'account1'))
        self.assertEqual(self.system.deposit(2, 'account1', 1000), 1000)
        self.assertEqual(self.system.pay(3, 'account1', 300), 'payment1')
        self.assertEqual(self.system.pay(4, 'account1', 200), 'payment2')
        self.assertEqual(self.system.pay(5, 'account1', 100), 'payment3')
        self.assertEqual(self.system.get_balance(6, 'account1', 5), 400)
        self.assertEqual(self.system.get_balance(86400007, 'account1', 86400002), 400)
        self.assertEqual(self.system.get_balance(86400008, 'account1', 86400003), 406)
        self.assertEqual(self.system.get_balance(86400009, 'account1', 86400004), 410)
        self.assertEqual(self.system.get_balance(86400010, 'account1', 86400005), 412)
        self.assertEqual(self.system.get_balance(86400011, 'account1', 86400010), 412)

    def test_level_4_case_06_get_balance_edge_cases(self):
        self.assertTrue(self.system.create_account(1, 'account1'))
        self.assertTrue(self.system.create_account(2, 'account2'))
        self.assertTrue(self.system.create_account(3, 'account3'))
        self.assertEqual(self.system.deposit(4, 'account1', 1000), 1000)
        self.assertEqual(self.system.deposit(5, 'account2', 2000), 2000)
        self.assertEqual(self.system.deposit(6, 'account3', 3000), 3000)
        self.assertEqual(self.system.pay(7, 'account1', 100), 'payment1')
        self.assertEqual(self.system.pay(8, 'account2', 200), 'payment2')
        self.assertEqual(self.system.pay(9, 'account3', 300), 'payment3')
        self.assertEqual(self.system.pay(10, 'account1', 400), 'payment4')
        self.assertTrue(self.system.merge_accounts(13, 'account1', 'account2'))
        self.assertIsNone(self.system.get_balance(14, 'account4', 10))
        self.assertIsNone(self.system.get_balance(15, 'account3', 2))
        self.assertIsNone(self.system.get_balance(16, 'account2', 13))
        self.assertTrue(self.system.create_account(20, 'account2'))
        self.assertEqual(self.system.deposit(21, 'account2', 2000), 2000)
        self.assertEqual(self.system.get_balance(30, 'account2', 25), 2000)

    def test_level_4_case_07_merge_edge_cases(self):
        self.assertTrue(self.system.create_account(1, 'account1'))
        self.assertTrue(self.system.create_account(2, 'account2'))
        self.assertEqual(self.system.deposit(3, 'account1', 500), 500)
        self.assertEqual(self.system.deposit(4, 'account2', 250), 250)
        self.assertFalse(self.system.merge_accounts(5, 'account1', 'account3'))
        self.assertFalse(self.system.merge_accounts(6, 'account3', 'account1'))
        self.assertFalse(self.system.merge_accounts(7, 'account1', 'account1'))

    def test_level_4_case_08_all_operations_1(self):
        self.assertTrue(self.system.create_account(1, 'account1'))
        self.assertTrue(self.system.create_account(2, 'account4'))
        self.assertTrue(self.system.create_account(3, 'account3'))
        self.assertTrue(self.system.create_account(4, 'account2'))
        self.assertEqual(self.system.deposit(5, 'account1', 1000), 1000)
        self.assertEqual(self.system.transfer(6, 'account1', 'account2', 500), 500)
        self.assertEqual(self.system.transfer(7, 'account1', 'account4', 100), 400)
        self.assertEqual(self.system.deposit(8, 'account2', 1000), 1500)
        self.assertIsNone(self.system.transfer(9, 'account2', 'account2', 300))
        self.assertEqual(self.system.deposit(10, 'account3', 1000), 1000)
        self.assertEqual(self.system.transfer(11, 'account3', 'account2', 200), 800)
        self.assertEqual(self.system.pay(12, 'account3', 200), 'payment1')
        self.assertEqual(self.system.deposit(13, 'account4', 1000), 1100)
        self.assertEqual(self.system.pay(14, 'account4', 500), 'payment2')
        self.assertEqual(self.system.get_payment_status(15, 'account3', 'payment1'), 'IN_PROGRESS')
        self.assertEqual(self.system.get_payment_status(16, 'account4', 'payment2'), 'IN_PROGRESS')
        expected = ['account1(600)', 'account4(500)', 'account3(400)', 'account2(0)']
        self.assertEqual(self.system.top_spenders(17, 4), expected)
        self.assertFalse(self.system.merge_accounts(18, 'account2', 'account5'))
        self.assertTrue(self.system.merge_accounts(19, 'account2', 'account3'))
        expected = ['account1(600)', 'account4(500)', 'account2(400)']
        self.assertEqual(self.system.top_spenders(20, 3), expected)
        self.assertFalse(self.system.merge_accounts(21, 'account2', 'account2'))
        self.assertEqual(self.system.get_balance(22, 'account1', 17), 400)
        self.assertIsNone(self.system.get_balance(23, 'account2', 3))
        self.assertIsNone(self.system.get_balance(24, 'account3', 20))
        self.assertEqual(self.system.get_balance(25, 'account4', 25), 600)
        self.assertEqual(self.system.get_balance(26, 'account1', 15), 400)
        self.assertEqual(self.system.get_balance(27, 'account2', 14), 1700)
        self.assertEqual(self.system.get_balance(28, 'account3', 13), 600)
        self.assertEqual(self.system.get_balance(29, 'account4', 12), 100)
        self.assertEqual(self.system.get_payment_status(86400012, 'account2', 'payment1'), 'CASHBACK_RECEIVED')
        self.assertEqual(self.system.get_payment_status(86400014, 'account4', 'payment2'), 'CASHBACK_RECEIVED')
        self.assertEqual(self.system.get_balance(86400015, 'account1', 86400014), 400)
        self.assertEqual(self.system.get_balance(86400016, 'account2', 86400014), 2304)
        self.assertIsNone(self.system.get_balance(86400017, 'account3', 86400014))
        self.assertEqual(self.system.get_balance(86400018, 'account4', 86400014), 610)

    def test_level_4_case_09_all_operations_2(self):
        self.assertTrue(self.system.create_account(1, 'account1'))
        self.assertTrue(self.system.create_account(2, 'account4'))
        self.assertTrue(self.system.create_account(3, 'account3'))
        self.assertTrue(self.system.create_account(4, 'account2'))
        self.assertEqual(self.system.deposit(5, 'account1', 1000), 1000)
        self.assertEqual(self.system.transfer(6, 'account1', 'account2', 500), 500)
        self.assertEqual(self.system.transfer(7, 'account1', 'account4', 100), 400)
        self.assertEqual(self.system.deposit(8, 'account2', 1000), 1500)
        self.assertIsNone(self.system.transfer(9, 'account2', 'account2', 300))
        self.assertEqual(self.system.deposit(10, 'account3', 1000), 1000)
        self.assertEqual(self.system.transfer(11, 'account3', 'account2', 200), 800)
        self.assertEqual(self.system.pay(12, 'account3', 200), 'payment1')
        self.assertEqual(self.system.deposit(13, 'account4', 1000), 1100)
        self.assertEqual(self.system.pay(14, 'account4', 500), 'payment2')
        self.assertEqual(self.system.get_payment_status(15, 'account3', 'payment1'), 'IN_PROGRESS')
        self.assertEqual(self.system.get_payment_status(16, 'account4', 'payment2'), 'IN_PROGRESS')
        self.assertTrue(self.system.merge_accounts(17, 'account3', 'account4'))
        self.assertTrue(self.system.merge_accounts(18, 'account2', 'account3'))
        self.assertTrue(self.system.merge_accounts(19, 'account1', 'account2'))
        self.assertEqual(self.system.deposit(20, 'account1', 100), 3400)
        self.assertIsNone(self.system.deposit(21, 'account2', 100))
        self.assertIsNone(self.system.deposit(22, 'account3', 100))
        self.assertIsNone(self.system.deposit(23, 'account4', 100))
        expected = ['account1(1500)']
        self.assertEqual(self.system.top_spenders(24, 4), expected)
        self.assertEqual(self.system.get_balance(25, 'account1', 25), 3400)
        self.assertEqual(self.system.get_balance(26, 'account2', 15), 1700)
        self.assertEqual(self.system.get_balance(27, 'account3', 14), 600)
        self.assertEqual(self.system.get_balance(28, 'account4', 13), 1100)
        self.assertEqual(self.system.get_payment_status(86400012, 'account1', 'payment1'), 'CASHBACK_RECEIVED')
        self.assertEqual(self.system.get_payment_status(86400014, 'account1', 'payment2'), 'CASHBACK_RECEIVED')

    def test_level_4_case_10_all_operations_3(self):
        self.assertTrue(self.system.create_account(1, 'acc1'))
        self.assertTrue(self.system.create_account(2, 'acc2'))
        self.assertTrue(self.system.create_account(3, 'acc3'))
        self.assertTrue(self.system.create_account(4, 'acc4'))
        self.assertTrue(self.system.create_account(5, 'acc5'))
        self.assertTrue(self.system.create_account(6, 'acc6'))
        self.assertTrue(self.system.create_account(7, 'acc7'))
        self.assertTrue(self.system.create_account(8, 'acc8'))
        self.assertTrue(self.system.create_account(9, 'acc9'))
        self.assertTrue(self.system.create_account(10, 'acc10'))
        self.assertIsNone(self.system.deposit(11, 'acc0', 5088))
        self.assertEqual(self.system.deposit(12, 'acc1', 7746), 7746)
        self.assertEqual(self.system.deposit(13, 'acc2', 8094), 8094)
        self.assertEqual(self.system.deposit(14, 'acc3', 6204), 6204)
        self.assertEqual(self.system.deposit(15, 'acc4', 7335), 7335)
        self.assertEqual(self.system.deposit(16, 'acc5', 9193), 9193)
        self.assertEqual(self.system.deposit(17, 'acc6', 6054), 6054)
        self.assertEqual(self.system.deposit(18, 'acc7', 9180), 9180)
        self.assertEqual(self.system.deposit(19, 'acc8', 5543), 5543)
        self.assertEqual(self.system.deposit(20, 'acc9', 6462), 6462)
        self.assertEqual(self.system.pay(21, 'acc1', 229), 'payment1')
        self.assertEqual(self.system.pay(22, 'acc2', 233), 'payment2')
        self.assertEqual(self.system.pay(23, 'acc3', 109), 'payment3')
        self.assertEqual(self.system.pay(24, 'acc4', 129), 'payment4')
        self.assertEqual(self.system.pay(25, 'acc5', 171), 'payment5')
        self.assertEqual(self.system.pay(26, 'acc6', 206), 'payment6')
        self.assertEqual(self.system.pay(27, 'acc7', 244), 'payment7')
        self.assertEqual(self.system.pay(28, 'acc8', 122), 'payment8')
        self.assertEqual(self.system.pay(29, 'acc9', 236), 'payment9')
        self.assertIsNone(self.system.pay(30, 'acc10', 149))
        self.assertIsNone(self.system.transfer(31, 'acc10', 'acc8', 213))
        self.assertEqual(self.system.transfer(32, 'acc7', 'acc1', 144), 8792)
        self.assertEqual(self.system.transfer(33, 'acc3', 'acc2', 227), 5868)
        self.assertIsNone(self.system.transfer(34, 'acc10', 'acc10', 176))
        self.assertEqual(self.system.transfer(35, 'acc3', 'acc4', 170), 5698)
        self.assertEqual(self.system.transfer(36, 'acc4', 'acc2', 124), 7252)
        self.assertIsNone(self.system.transfer(37, 'acc9', 'acc9', 214))
        self.assertEqual(self.system.transfer(38, 'acc7', 'acc6', 160), 8632)
        self.assertEqual(self.system.transfer(39, 'acc9', 'acc3', 230), 5996)
        self.assertEqual(self.system.transfer(40, 'acc1', 'acc8', 122), 7539)
        self.assertTrue(self.system.merge_accounts(42, 'acc1', 'acc2'))
        self.assertTrue(self.system.merge_accounts(43, 'acc1', 'acc3'))
        self.assertTrue(self.system.merge_accounts(44, 'acc1', 'acc4'))
        self.assertTrue(self.system.merge_accounts(45, 'acc1', 'acc5'))
        self.assertTrue(self.system.merge_accounts(46, 'acc1', 'acc6'))
        self.assertTrue(self.system.merge_accounts(47, 'acc1', 'acc7'))
        self.assertTrue(self.system.merge_accounts(48, 'acc1', 'acc8'))
        self.assertTrue(self.system.merge_accounts(49, 'acc1', 'acc9'))
        self.assertTrue(self.system.merge_accounts(50, 'acc1', 'acc10'))
        expected = ['acc1(2856)']
        self.assertEqual(self.system.top_spenders(51, 10), expected)
        self.assertFalse(self.system.merge_accounts(52, 'acc1', 'acc2'))
        self.assertFalse(self.system.merge_accounts(53, 'acc1', 'acc1'))
        self.assertEqual(self.system.get_payment_status(86400031, 'acc1', 'payment1'), 'CASHBACK_RECEIVED')
        self.assertEqual(self.system.get_payment_status(86400032, 'acc1', 'payment2'), 'CASHBACK_RECEIVED')
        self.assertEqual(self.system.get_payment_status(86400033, 'acc1', 'payment3'), 'CASHBACK_RECEIVED')
        self.assertEqual(self.system.get_payment_status(86400034, 'acc1', 'payment4'), 'CASHBACK_RECEIVED')
        self.assertEqual(self.system.get_payment_status(86400035, 'acc1', 'payment5'), 'CASHBACK_RECEIVED')
        self.assertEqual(self.system.get_payment_status(86400036, 'acc1', 'payment6'), 'CASHBACK_RECEIVED')
        self.assertEqual(self.system.get_payment_status(86400037, 'acc1', 'payment7'), 'CASHBACK_RECEIVED')
        self.assertEqual(self.system.get_payment_status(86400038, 'acc1', 'payment8'), 'CASHBACK_RECEIVED')
        self.assertEqual(self.system.get_payment_status(86400039, 'acc1', 'payment9'), 'CASHBACK_RECEIVED')
        self.assertIsNone(self.system.get_payment_status(86400040, 'acc1', 'payment10'))
        self.assertIsNone(self.system.get_balance(86400041, 'acc0', 33))
        self.assertEqual(self.system.get_balance(86400042, 'acc1', 2), 0)
        self.assertEqual(self.system.get_balance(86400043, 'acc2', 19), 8094)
        self.assertIsNone(self.system.get_balance(86400044, 'acc3', 2))
        self.assertEqual(self.system.get_balance(86400045, 'acc4', 17), 7335)
        self.assertIsNone(self.system.get_balance(86400046, 'acc5', 50))
        self.assertEqual(self.system.get_balance(86400047, 'acc6', 23), 6054)
        self.assertEqual(self.system.get_balance(86400048, 'acc7', 17), 0)
        self.assertEqual(self.system.get_balance(86400049, 'acc8', 20), 5543)
        self.assertEqual(self.system.get_balance(86400050, 'acc9', 35), 6226)
        self.assertIsNone(self.system.get_balance(86400051, 'acc0', 26))
        self.assertEqual(self.system.get_balance(86400052, 'acc1', 41), 7539)
        self.assertIsNone(self.system.get_balance(86400053, 'acc2', 44))
        self.assertEqual(self.system.get_balance(86400054, 'acc3', 5), 0)
        self.assertIsNone(self.system.get_balance(86400055, 'acc4', 44))
        self.assertEqual(self.system.get_balance(86400056, 'acc5', 24), 9193)
        self.assertIsNone(self.system.get_balance(86400057, 'acc6', 1))
        self.assertIsNone(self.system.get_balance(86400058, 'acc7', 4))
        self.assertEqual(self.system.get_balance(86400059, 'acc8', 37), 5421)
        self.assertEqual(self.system.get_balance(86400060, 'acc9', 48), 5996)
        self.assertIsNone(self.system.get_balance(86400061, 'acc0', 86400040))
        self.assertEqual(self.system.get_balance(86400062, 'acc1', 86400041), 64161)
        self.assertIsNone(self.system.get_balance(86400063, 'acc2', 86400042))
        self.assertIsNone(self.system.get_balance(86400064, 'acc3', 86400043))
        self.assertIsNone(self.system.get_balance(86400065, 'acc4', 86400044))
        self.assertIsNone(self.system.get_balance(86400066, 'acc5', 86400045))
        self.assertIsNone(self.system.get_balance(86400067, 'acc6', 86400046))
        self.assertIsNone(self.system.get_balance(86400068, 'acc7', 86400047))
        self.assertIsNone(self.system.get_balance(86400069, 'acc8', 86400048))
        self.assertIsNone(self.system.get_balance(86400070, 'acc9', 86400049))
